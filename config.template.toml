#
# PgCat config example.
#

#
# General pooler settings
[general]
# What IP to run on, 0.0.0.0 means accessible from everywhere.
host = "${HOST}"

# Port to run on, same as PgBouncer used in this example.
port = ${PORT}

# Whether to enable prometheus exporter or not.
enable_prometheus_exporter = true

# Port at which prometheus exporter listens on.
prometheus_exporter_port = 9930

# How long to wait before aborting a server connection (ms).
connect_timeout = ${CONNECT_TIMEOUT}

# How much time to give `SELECT 1` health check query to return with a result (ms).
healthcheck_timeout = ${HEALTHCHECK_TIMEOUT}

# How long to keep connection available for immediate re-use, without running a healthcheck query on it
healthcheck_delay = ${HEALTHCHECK_DELAY}

# How much time to give clients during shutdown before forcibly killing client connections (ms).
shutdown_timeout = ${SHUTDOWN_TIMEOUT}

# For how long to ban a server if it fails a health check (seconds).
ban_time = ${BAN_TIME} # seconds

# If we should log client connections
log_client_connections = ${LOG_CLIENT_CONNECTIONS}

# If we should log client disconnections
log_client_disconnections = ${LOG_CLIENT_DISCONNECTIONS}

# Credentials to access the virtual administrative database (pgbouncer or pgcat)
# Connecting to that database allows running commands like `SHOW POOLS`, `SHOW DATABASES`, etc..
admin_username = "${ADMIN_USERNAME}"
admin_password = "${ADMIN_PASSWORD}"

# pool
# configs are structured as pool.<pool_name>
# the pool_name is what clients use as database name when connecting
# For the example below a client can connect using "postgres://sharding_user:sharding_user@pgcat_host:pgcat_port/sharded"
[pools.$POOL_NAME]
# Pool mode (see PgBouncer docs for more).
# session: one server connection per connected client
# transaction: one server connection per client transaction
pool_mode = "${POOL_MODE}"

# If the client doesn't specify, route traffic to
# this role by default.
#
# any: round-robin between primary and replicas,
# replica: round-robin between replicas only without touching the primary,
# primary: all queries go to the primary unless otherwise specified.
default_role = "${DEFAULT_ROLE}"

# Query parser. If enabled, we'll attempt to parse
# every incoming query to determine if it's a read or a write.
# If it's a read query, we'll direct it to a replica. Otherwise, if it's a write,
# we'll direct it to the primary.
query_parser_enabled = ${QUERY_PARSER_ENABLED}

# If the query parser is enabled and this setting is enabled, we'll attempt to
# infer the role from the query itself.
query_parser_read_write_splitting = ${QUERY_PARSER_READ_WRITE_SPLITTING}

# If the query parser is enabled and this setting is enabled, the primary will be part of the pool of databases used for
# load balancing of read queries. Otherwise, the primary will only be used for write
# queries. The primary can always be explicitly selected with our custom protocol.
primary_reads_enabled = ${PRIMARY_READS_ENABLED}

# So what if you wanted to implement a different hashing function,
# or you've already built one and you want this pooler to use it?
#
# Current options:
#
# pg_bigint_hash: PARTITION BY HASH (Postgres hashing function)
# sha1: A hashing function based on SHA1
#
sharding_function = "pg_bigint_hash"

${USER_CONFIG}

${POOL_CONFIG}

